table(prediction,CatFoo$grouping)
for (i in 1:300) {
if(sample$Previous.Position[i]<=65 & sample$Traffic....[i]<=0) {sample$Dichotomous[i]<-1}
else {sample$Dichotomous[i]<-0}
}
sample$Dichotomous<-as.numeric(sample$Dichotomous)
key1<-subset(sample,sample$Dichotomous==1)
plot(key1$Position,key1$CPC,main="Plot of the CPC and Position for dichotomous=1",col.main="red")
plot_ly(x=sample$Previous.Position,y=sample$Traffic....,opacity=0.6,type="hist",width=700,name="Previous Position and Traffic")%>%
add_trace(x=sample$Dichotomous,opacity=0.6,type="hist",width=700,name="Classification according to desicion tree")
summary(modeltree)
plot(modeltree,main="Decision tree for food or cat food",col.main="red")
datacat<-subset(whiskas,whiskas$grouping=="Cat Food")
d<-dist(datacat[,-c(1,7,12,13,14)],method="euclidean")
fit.a<-hclust(d,method="average")
fit.b<-hclust(d,method="complete")
plot(fit.a,main="Method Average Linkage",col.main="red")
plot(fit.b,main="Method Complete Linkage",col.main="green") #2385 observation of cat food is a special group.
pie(datacat$Position[1:10],col=c("red","blue","purple"))
#Hierachical clustering for other food
dataother<-subset(whiskas,whiskas$grouping=="Other Food")
d<-dist(dataother[,-c(1,7,12,13,14)],method="euclidean")
fit.c<-hclust(d,method="average")
fit.d<-hclust(d,method="complete")
plot(fit.c,main="Method Average Linkage",col.main="red")
plot(fit.d,main="Method CompleteLinkage",col.main="green")
pie(dataother$Position[1:10],col=c("red","blue","purple"))
#Correlation for cat food
cor(datacat[,-c(1,7,12,13,14)])
#Linear Reggression for cat food
step(lm(CPC~.,data=datacat[,-c(1,7,12,13,14)]))
fit1<-lm(CPC ~ Previous.Position + Traffic.... + Traffic.Cost.... + Competition,data=datacat)
summary(fit1) #Cost Per click has linear correlation with previous position,traffic,traffic cost and competition
plot(fit1)#Possible outliers observation 2 and 5
cor(datacat[,-c(1,7,12,13,14)])
postinf1<-MCMCregress(CPC~Position+Search.Volume+Traffic.Cost....+Competition+Number.of.Results,data =datacat[,-c(1,7,12,13,14)] ,b0 = 0,B0 = 0.1,sigma.mu = 5,sigma.var = 25)
attributes(postinf1)
hist(postinf1,main="Posterior Information given from the prior distribution",col=c("red","purple","blue"),col.main="red",yaxt='n')
View(postinf1)
trend_calc <- function(trend_data, func_name = mean)
{
trend_data <- unname(sapply(trend_data, function(w) func_name(as.numeric(strsplit(w, ",")[[1]]))))
return(trend_data)
}
cattrend<-trend_calc(datacat$Trends)
postinf<-MCMCregress(CPC~Position+Search.Volume+Traffic....+Competition+Number.of.Results,data = data1,b0 = 0,B0 = 0.1,sigma.mu = 5,sigma.var = 25)
plot(postinf)
plot(postinf)
plot(postinf)
install.packages("ggmcmc")
library(ggmcmc)
ggmcmc(postinf)
ggmcmc(postinf1)
str(postinf)
png(filename = "figs/baye/Posterior_whiskas.png")
barplot(postinf,col = c("red","blue","grey"),main="Posterior Information given from the prior distribution",col.main="red")
dev.off
png(filename = "figs/baye/Posterior_whiskas.png")
barplot(postinf,col = c("red","blue","grey"),main="Posterior Information given from the prior distribution",col.main="red")
dev.off()
png(filename = "figs/baye/Posterior_whiskas.png")
plot(postinf,col = c("red","blue","grey"),main="Posterior Information given from the prior distribution",col.main="red")
dev.off()
plot(postinf,main="Posterior Information given from the prior distribution")
ggs(postinf)
s<-ggs(postinf)
ggmcmc(s)
View(data)
str(data)
s<-ggs(data)
data(radon)
data(radon)
View(radon)
class(postinf)
(radon)
head(radon)
radon[1,]
radon[,1]
radon[1]
radon[2]
radon[3]
radon[4]
radon[4]
head(radon[4])
head(radon[4],10)
head(radon[4],10)
postinf
?MCMCregress
randon
radon$s.radon.short
ggs(postinf)
View(ggs(postinf))
d<-ggs(postinf)
str(d)
ggplot()
detach("package:bit", unload=TRUE)
detach("package:coda", unload=TRUE)
detach("package:corrplot", unload=TRUE)
detach("package:devtools", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:ffbase", unload=TRUE)
detach("package:ff", unload=TRUE)
detach(all)
?detach
detach(earch()[pos])
detach(earch())
detach(search())
detach("package:forecast", unload=TRUE)
detach("package:ggdendro", unload=TRUE)
detach("package:ggfortify", unload=TRUE)
detach("package:ggmcmc", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:MASS", unload=TRUE)
detach("package:MCMCpack", unload=TRUE)
detach("package:modeltools", unload=TRUE)
detach("package:plotly", unload=TRUE)
detach("package:plotrix", unload=TRUE)
detach("package:psych", unload=TRUE)
detach("package:rattle", unload=TRUE)
detach("package:sandwich", unload=TRUE)
detach("package:timeDate", unload=TRUE)
detach("package:tidyr", unload=TRUE)
detach("package:tabplot", unload=TRUE)
detach("package:urca", unload=TRUE)
detach("package:tseries", unload=TRUE)
detach("package:wavelets", unload=TRUE)
detach("package:zoo", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:grid", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:rpart", unload=TRUE)
detach("package:utils", unload=TRUE)
detach("package:stats4", unload=TRUE)
detach("package:stats", unload=TRUE)
library(devtools)
library(devtools)
library("devtools")
library(rpart)
library(forecast)
library(urca)
library(tseries)
library(cluster)
library("rpart")
library("rattle")
library("ggdendro")
library("tabplot")
library(MCMCpack)
library(corrplot)
library(psych)
library("wavelets")
library(dplyr)
library("zoo")
source("R/data.translation.R")
source("R/piechart.R")
source("R/grouping.R")
source("R/grouping.R")
source("R/grouping.R")
subDir <- "figs/dataplot/purina"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
subDir <- "figs/dataplot/whiskas"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
dir.create(file.path(mainDir, subDir))
subDir <- "figs/dataplot/purina"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
subDir <- "figs/dataplot/purina"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
subDir <- "figs/dataplot/whiskas"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
getwd()
dir.create(file.path(mainDir, subDir))
subDir <- "figs/dataplot"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
subDir <- "figs/dataplot/purina"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
subDir <- "figs/dataplot/whiskas"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
source("R/grouping.R")
source("R/correlation.R")
source("R/bayesian.R")
source("R/bayesian.R")
library("ggmcmc")
source("R/bayesian.R")
source("R/bayesian.R")
source("R/classification.R")
source("R/clustering.R")
source("R/clustering.R")
source("R/prediction.R")
source("R/timeseries.R")
source("R/trends.R")
#saving credentials for plotly
Sys.setenv("plotly_username"="asherswing")
Sys.setenv("plotly_api_key"="jz8mnst8vm")
###################################################################################
# saving data contribution in form of pie chart
png(height=1200, width=1200, pointsize=25, file=paste0("figs/pie/pie_for_eachdomain.png"))
plot_pie_3d_eachDomain(nothing_in_pw,common_pXw,excl_pXe,excl_wXe)
dev.off()
subDir <- "figs/pie"
if (!file.exists(subDir)){
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plot_pie_3d_eachDomain <- function(other,common,excl_p,excl_w){
slices <- c(length(other),length(common), length(excl_p),length(excl_w))
lbls <- c("Others food item", "Common search from purina and whiskas", "Exclusive search drom purina", "Exclusive search from Whiskas")
pct <- round(slices/nrow(export)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
s1<-data.frame("Group"<-lbls,"Values"<-slices)
pie <- ggplot(s1, aes(x="", y=Values, fill=Group))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0)+
theme_grey(base_size = 18) +
labs(title="Pie Representation of % share of  cat_food keywords from Whiskas and Purina")
pie
}
####plot_pie_3d(nothing_in_pw,common_pXw,excl_pXe,excl_wXe)
html_pie_3d_eachDomain <- function(other,common,excl_p,excl_w){
slices <- c(length(other),length(common), length(excl_p),length(excl_w))
lbls <- c("Others food item", "Common search from purina and whiskas", "Exclusive search drom purina", "Exclusive search from Whiskas")
pct <- round(slices/nrow(export)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
d<-data.frame(labels=lbls,values=slices)
plot2<-plot_ly(d, labels = labels, values = values, type = "pie",hole = 0.6,showlegend=F) %>%
layout(title = "Pie Chart for each domain search ")
plot2
}
####plot_pie_3d(nothing_in_pw,common_pXw,excl_pXe,excl_wXe)
plot_pie_catfood<-function(arg1,arg2,arg3,arg4){
slices1<- c(length(arg1),length(arg2))
slices2<- c(length(arg3),length(arg4))
pct1 <- round(slices1/nrow(purina)*100)
pct2 <- round(slices2/nrow(whiskas)*100)
lblsC<-c("Other Food items Search","Cat Food item search")
lbls1 <- paste(lblsC, pct1) # add percents to labels
lbls1 <- paste(lbls1,"%",sep="") # ad % to labels
lbls2 <- paste(lblsC, pct2) # add percents to labels
lbls2 <- paste(lbls2,"%",sep="") # ad % to labels
d1<-data.frame(labels=lbls1,values=slices1)
d2<-data.frame(labels=lbls2,values=slices2)
pie1 <- ggplot(d1, aes(x="", y=values, fill=labels))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0)+
theme_grey(base_size = 18) +
labs(title="CatFood category keyword  % share in Purina")
pie2 <- ggplot(d2, aes(x="", y=values, fill=labels))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0)+
theme_grey(base_size = 18) +
labs(title="CatFood category keyword  % share in Whiskas")
multiplot(pie1,pie2)
}
###plot_pie_catfood(pXe_withDuplicated,other_pXe,wXe_withDuplicated,other_wXe)
html_pie_catfood<-function(arg1,arg2,arg3,arg4){
slices1<- c(length(arg1),length(arg2))
slices2<- c(length(arg3),length(arg4))
pct1 <- round(slices1/nrow(purina)*100)
pct2 <- round(slices2/nrow(whiskas)*100)
lblsC<-c("Other Food items Search","Cat Food item search")
lbls1 <- paste(lblsC, pct1) # add percents to labels
lbls1 <- paste(lbls1,"%",sep="") # ad % to labels
lbls2 <- paste(lblsC, pct2) # add percents to labels
lbls2 <- paste(lbls2,"%",sep="") # ad % to labels
d1<-data.frame(labels=lbls1,values=slices1)
d2<-data.frame(labels=lbls2,values=slices2)
plot1<-plot_ly(data = d1, labels = labels, values = values, type = "pie", domain = list(x = c(0,0.4), y = c(0.4, 1)),
name = "Purina.com ", showlegend = F)%>%
add_trace(data = d2, labels = labels, values = values, type = "pie", domain = list(x = c(0.6, 1), y = c(0.4, 1)),
name = "Whiskas.com", showlegend = F) %>%
layout(title = "Cat Food Search % from each Domain and ")
plot1
}
###html_pie_catfood(pXe_withDuplicated,other_pXe,wXe_withDuplicated,other_wXe)
compare_position<-function(arg1,arg2){
dfd1<-as.data.frame(table(arg1$Position))
dfd2<-as.data.frame(table(arg1$Previous.Position))
p<-plot_ly(x=arg1$Position,opacity=0.6,type="histogram",width = 700,name="Current position @ purina")%>%
add_trace(x=arg1$Previous.Position,opacity=0.6,type="histogram",width = 700,name="Previous position @ purina")%>%
layout(barmode="hi")%>%
layout(yaxis=list(range=c(0,900)))%>%
layout(title="Comparision between Position distribuiton in purina.com",
xaxis=list(title="Positions"),
yaxis=list(title="Frequency"))%>%add_trace(x=dfd1$Var1,y=dfd1$Freq,mode="line",name="current position")%>%add_trace(x=dfd2$Var1,y=dfd2$Freq,mode="line",name="privious position")
htmlwidgets::saveWidget(as.widget(p),"position_distribution_purina.html")
df1<-as.data.frame(table(arg2$Position))
df2<-as.data.frame(table(arg2$Previous.Position))
w<-  plot_ly(x=arg2$Position,opacity=0.6,type="histogram",width = 700,name="Current position @ whiskas")%>%
add_trace(x=arg2$Previous.Position,opacity=0.6,type="histogram",width = 700,name="Previous position @ whiskas")%>%
layout(yaxis=list(range=c(0,900)))%>%
layout(title="Comparision between Position distribuiton in whiskas.com",
xaxis=list(title="Positions"),
yaxis=list(title="Frequency"))%>%add_trace(x=df1$Var1,y=df1$Freq,mode="line",name="current position")%>%add_trace(x=df2$Var1,y=df2$Freq,mode="line",name = "Previous position")
htmlwidgets::saveWidget(as.widget(w),"position_distribution_whiskas.html")
plot1<-subplot(p,w,margin = 0.05,nrows = 2) %>%
layout(title="Positon Distribution" )
plot1
}
#compare_position(purina,whiskas)
png(height=1200, width=1200, pointsize=25, file="figs/pie/pie_for_eachdomain.png")
plot_pie_3d_eachDomain(nothing_in_pw,common_pXw,excl_pXe,excl_wXe)
dev.off()
png(height=1200, width=1200, pointsize=25, file="figs/pie/catFood_searched_eachdomain.png")
plot_pie_catfood(pXe_withDuplicated,other_pXe,wXe_withDuplicated,other_wXe)
dev.off()
#temp<-compare_position(purina,whiskas)
#htmlwidgets::saveWidget(as.widget(temp),"position_distribution_comparision.html")
#temp<-html_pie_3d_eachDomain(nothing_in_pw,common_pXw,excl_pXe,excl_wXe)
#htmlwidgets::saveWidget(as.widget(temp),"pie_for_eachdomain.html")
#temp<-html_pie_catfood(pXe_withDuplicated,other_pXe,wXe_withDuplicated,other_wXe)
#htmlwidgets::saveWidget(as.widget(temp),"catFood_searched_eachdomain.html")
################################################################################
temp<-plot_time_volume(purina)
ggsave(file="figs/dataplot/purina/time_vs_volume_purina.png",temp)
temp<-plot_time_volume(whiskas)
ggsave(file="figs/dataplot/whiskas/time_vs_volume_whiskas.png",temp)
temp<-plot_traffic_cost(purina)
ggsave(file="figs/dataplot/purina/traffic_vs_cost_purina.png",temp)
temp<-plot_traffic_cost(whiskas)
ggsave(file="figs/dataplot/whiskas/traffic_vs_cost_whiskas.png",temp)
d<-dist(data[1:100,],method="euclidean")
fit<-hclust(d,method="average")
#plot(fit,main="Average Linkage",col.main="red",xlab="observations",ylab="height") #Two aobservations seems to differ
c<-ggdendrogram(fit)+ labs(title="Average Linkage by hierarchical clustering in Purina ",x="showing correlated data average linkages",y="")
c<-ggdendrogram(fit)+ labs(title="Average Linkage by hierarchical clustering in Purina ",x="showing correlated data average linkages",y="")
ggsave(filename = "figs/dataplot/sample_hclust_whiskas.png",c)
d<-dist(data1[1:100,],method="euclidean")
fit<-hclust(d,method="average")
#plot(fit,main="Average Linkage",col.main="red",xlab="observations",ylab="height") #Two aobservations seems to differ
c<-ggdendrogram(fit)+
labs(title="Average Linkage by hierarchical clustering in Whiskas",x="showing correlated data average linkages",y="")
ggsave(filename = "figs/dataplot/sample_hclust_whiskas.png",c)
####
png(filename = "figs/dataplot/purina/multivariate_1.png",width = 1200,height =1000)
tableplot(data,sortCol = 1,title="Visualization multivariate datasets pattern with other variabels \n Each columns is plotted according to Position ")
dev.off()
png(filename = "figs/dataplot/purina/multivariate_2.png",width = 1200,height =1000)
tableplot(data,sortCol = 2,title="Visualization multivariate datasets with several variabels \n columns sorted according to Previous Position ")
dev.off()
png(filename = "figs/dataplot/purina/multivariate_3.png",width = 1200,height =1000)
tableplot(data,sortCol = 3,title="Visualization multivariate datasets with several variabels \n columns sorted according to Search volume ")
dev.off()
png(filename = "figs/dataplot/purina/multivariate_4.png",width = 1200,height =1000)
tableplot(data,sortCol = 4,title="Visualization multivariate datasets with several variabels \n columns sorted according to Keyword Difficulty")
dev.off()
png(filename = "figs/dataplot/purina/multivariate_5.png",width = 1200,height =1000)
tableplot(data,sortCol = 5,title="Visualization multivariate datasets with several variabels \n columns sorted according to CPC ")
dev.off()
png(filename = "figs/dataplot/purina/multivariate_6.png",width = 1200,height =1000)
tableplot(data,sortCol = 6,title="Visualization multivariate datasets with several variabels \n columns sorted according to Traffic ")
dev.off()
png(filename = "figs/dataplot/purina/multivariate_7.png",width = 1200,height =1000)
tableplot(data,sortCol = 7,title="Visualization multivariate datasets with several variabels \n columns sorted according to Traffic cost ")
dev.off()
png(filename = "figs/dataplot/purina/multivariate_8.png",width = 1200,height =1000)
tableplot(data,sortCol = 8,title="Visualization multivariate datasets with several variabels \n columns sorted according to competition ")
dev.off()
png(filename = "figs/dataplot/purina/multivariate_9.png",width = 1200,height =1000)
tableplot(data,sortCol = 9,title="Visualization multivariate datasets with several variabels \n columns sorted according to number of result")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_1.png",width = 1200,height =1000)
tableplot(data1,sortCol = 1,title="Visualization multivariate datasets pattern with other variabels \n Each columns is plotted according to Position ")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_2.png",width = 1200,height =1000)
tableplot(data1,sortCol = 2,title="Visualization multivariate datasets with several variabels \n columns sorted according to Previous Position ")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_3.png",width = 1200,height =1000)
tableplot(data1,sortCol = 3,title="Visualization multivariate datasets with several variabels \n columns sorted according to Search volume ")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_4.png",width = 1200,height =1000)
tableplot(data1,sortCol = 4,title="Visualization multivariate datasets with several variabels \n columns sorted according to Keyword Difficulty")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_5.png",width = 1200,height =1000)
tableplot(data1,sortCol = 5,title="Visualization multivariate datasets with several variabels \n columns sorted according to CPC ")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_6.png",width = 1200,height =1000)
tableplot(data1,sortCol = 6,title="Visualization multivariate datasets with several variabels \n columns sorted according to Traffic ")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_7.png",width = 1200,height =1000)
tableplot(data1,sortCol = 7,title="Visualization multivariate datasets with several variabels \n columns sorted according to Traffic cost ")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_8.png",width = 1200,height =1000)
tableplot(data1,sortCol = 8,title="Visualization multivariate datasets with several variabels \n columns sorted according to competition ")
dev.off()
png(filename = "figs/dataplot/whiskas/multivariate_9.png",width = 1200,height =1000)
tableplot(data1,sortCol = 9,title="Visualization multivariate datasets with several variabels \n columns sorted according to number of result")
dev.off()
#top_under_keyword
# pyscho describe(purina)
# ggplot(export,aes(Competitive.Density, CPC..USD.))+geom_point()
#ggplot(export,aes(Competitive.Density, CPC..USD.))+geom_point(aes(color=SERP.Features))+facet_wrap(~SERP.Features,nrow = 6,ncol=7)
debugSource('~/R_analyses/analyses.R')
ggsave(file="figs/dataplot/purina/traffic_vs_cost_purina.png",temp)
temp<-plot_time_volume(purina)
ggsave(file="figs/dataplot/purina/time_vs_volume_purina.png",temp)
temp<-plot_time_volume(whiskas)
ggsave(file="figs/dataplot/whiskas/time_vs_volume_whiskas.png",temp)
temp<-plot_traffic_cost(purina)
ggsave(file="figs/dataplot/purina/traffic_vs_cost_purina.png",temp)
temp<-plot_time_volume(purina)
temp
dat<-purina
ggplot(dat,aes(Timestamp,Search.Volume))+
ylim(0,3000)+
geom_point(aes(color=grouping),alpha=0.5)+
geom_text(aes(label=purina$Keyword,hjust=-0.1),angle=0,check_overlap = T)+
facet_wrap(~grouping,nrow=2)+geom_smooth()+
scale_x_date(date_breaks = "1 week", date_labels = "%m")+
labs(title="Average search for cat Food category keyword and Other",y="Average number of times user serched the keyword",x="Month in which searched is performed")
ggplot(dat,aes(Timestamp,Search.Volume))+
ylim(0,3000)+
geom_point(aes(color=grouping),alpha=0.5)
ggplot(dat,aes(Timestamp,Search.Volume))+
geom_point(aes(color=grouping),alpha=0.5)
z<-ggplot(dat,aes(Timestamp,Search.Volume))
z+geom_point(aes(color=grouping),alpha=0.5)
z+geom_point()
library("ggplot")
library("ggplot2")
z<-ggplot(dat,aes(Timestamp,Search.Volume))
z+geom_point()
dev.off()
source("R/data.translation.R")
source("R/piechart.R")
source("R/grouping.R")
source("R/correlation.R")
source("R/bayesian.R")
source("R/classification.R")
source("R/clustering.R")
source("R/prediction.R")
source("R/timeseries.R")
source("R/trends.R")
png(height=1200, width=1200, pointsize=25, file="figs/pie/pie_for_eachdomain.png")
plot_pie_3d_eachDomain(nothing_in_pw,common_pXw,excl_pXe,excl_wXe)
dev.off()
png(height=1200, width=1200, pointsize=25, file="figs/pie/catFood_searched_eachdomain.png")
plot_pie_catfood(pXe_withDuplicated,other_pXe,wXe_withDuplicated,other_wXe)
dev.off()
temp<-plot_time_volume(purina)
ggsave(file="figs/dataplot/purina/time_vs_volume_purina.png",temp)
temp<-plot_time_volume(whiskas)
ggsave(file="figs/dataplot/whiskas/time_vs_volume_whiskas.png",temp)
temp
dat<-whiskas
ggplot(dat,aes(Timestamp,Search.Volume))+
ylim(0,3000)+
geom_point(aes(color=grouping),alpha=0.5)+
geom_text(aes(label=purina$Keyword,hjust=-0.1),angle=0,check_overlap = T)+
facet_wrap(~grouping,nrow=2)+geom_smooth()+
scale_x_date(date_breaks = "1 week", date_labels = "%m")+
labs(title="Average search for cat Food category keyword and Other",y="Average number of times user serched the keyword",x="Month in which searched is performed")
ggplot(dat,aes(Timestamp,Search.Volume))+
ylim(0,3000)+
geom_point(aes(color=grouping),alpha=0.5)+
geom_text(aes(label=factor(purina$Keyword),hjust=-0.1),angle=0,check_overlap = T)+
facet_wrap(~grouping,nrow=2)+geom_smooth()+
scale_x_date(date_breaks = "1 week", date_labels = "%m")+
labs(title="Average search for cat Food category keyword and Other",y="Average number of times user serched the keyword",x="Month in which searched is performed")
str(purina)
str(whiskas)
ggplot(dat,aes(Timestamp,Search.Volume))+
geom_point()
ggplot(dat,aes(Timestamp,Search.Volume))+geom_point()
dat
str(dat)
plot(dat)
plot(dat$CPC)
